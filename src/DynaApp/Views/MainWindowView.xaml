<Window x:Class="DynaApp.Views.MainWindowView"
        x:Name="mainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="{Binding Path=Title}"
        Height="800" Width="500"
        FocusManager.FocusedElement="{Binding ElementName=modelControl}"
        xmlns:views="clr-namespace:DynaApp.Views"
        xmlns:viewModels="clr-namespace:DynaApp.ViewModels"
        xmlns:controls="clr-namespace:DynaApp.Controls"
        Icon="../Images/AppIcon.ico">

    <Window.Resources>
        <ResourceDictionary>

            <!-- UI commands. -->
            <RoutedUICommand x:Key="Commands.DeleteSelectedGraphics" />
            <RoutedUICommand x:Key="Commands.DeleteVariable" />
            <RoutedUICommand x:Key="Commands.DeleteDomain" />
            <RoutedUICommand x:Key="Commands.DeleteConstraint" />

            <ControlTemplate x:Key="editButtonTemplate"
                             TargetType="{x:Type Button}">
                <Grid x:Name="grid">
                    <Grid.RenderTransform>
                        <ScaleTransform
                            ScaleX="1"
                            ScaleY="1"
                            CenterX="10"
                            CenterY="10"/>
                    </Grid.RenderTransform>
                    <Ellipse x:Name="shadow"
                             VerticalAlignment="Stretch"
                             HorizontalAlignment="Stretch"
                             Fill="Gray"> 
                        <Ellipse.RenderTransform>
                            <TranslateTransform X="1.5"
                                                Y="1.5"/>
                        </Ellipse.RenderTransform>
                    </Ellipse>
                    <Ellipse x:Name="ellipse"
                             Stroke="Black"
                             VerticalAlignment="Stretch"
                             HorizontalAlignment="Stretch"
                             Fill="White"/>
                    <Image Source="../Images/pencil_small.png"
                            Margin="2"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <EventTrigger RoutedEvent="Mouse.MouseEnter">
                        <!-- 
                        Make the 'delete connection button' larger when the mouse 
                        cursor is hovered over it.
                        -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleX"
                                    To="1.3"
                                    Duration="0:0:0.25"/>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleY"
                                    To="1.3"
                                    Duration="0:0:0.25"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>

                    <EventTrigger RoutedEvent="Mouse.MouseLeave">
                        <!-- 
                        Return the 'delete connection button' to normal size when the mouse
                        cursor is moved away.
                        -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleX"
                                    To="1"
                                    Duration="0:0:0.05"/>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleY"
                                    To="1"
                                    Duration="0:0:0.05"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ControlTemplate.Triggers>

            </ControlTemplate>

            <DataTemplate DataType="{x:Type viewModels:WorkspaceViewModel}">
                <StackPanel>

                    <!-- Workspace mode selector -->
                    <ComboBox x:Name="workspaceViewSelector"
                              ItemsSource="{Binding AvailableDisplayModes}"
                              SelectedItem="{Binding SelectedDisplayMode, Mode=TwoWay}"/>

                    <ContentPresenter x:Name="contentView" 
                                      Content="{Binding SelectedDisplayViewModel}"/>

                </StackPanel>
            </DataTemplate>
            
            <DataTemplate DataType="{x:Type viewModels:ModelViewModel}">
                <!--
                The ScrollViewer displays scrollbars when the content is too big to fit in the viewport. 
                Focusable is set to False because it is only that ModelView that I want to be focusable.
                -->
                <ScrollViewer x:Name="contentViewer"
                              HorizontalScrollBarVisibility="Auto"
                              Focusable="False">

                    <!--
                    We need to nest the ModelView inside an AdornerDecorator so that adorners 
                    work correctly.
                    -->
                    <AdornerDecorator>
                    
                        <views:ModelView x:Name="modelControl"
                                         Width="2000"
                                         Height="2000"
                                         GraphicsSource="{Binding Items}"/>

                    </AdornerDecorator>

                </ScrollViewer>
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewModels:SolutionViewModel}">
                <ListView x:Name="valuesListBox"
                          ItemsSource="{Binding Values}">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="Name" 
                                            DisplayMemberBinding="{Binding VariableName}"/>
                            <GridViewColumn Header="Value" 
                                            DisplayMemberBinding="{Binding Value}"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </DataTemplate>

        <!--
        Define the visual style for a GraphicItem.
        
        Binds 'X' and 'Y' in the view-model to 'X' and 'Y' in the GraphicItem class.
        
        This sets the position of the graphic within the Canvas.
        -->
        <Style TargetType="{x:Type controls:GraphicItem}">
            <Setter Property="X"
                    Value="{Binding X}" />
            <Setter Property="Y"
                    Value="{Binding Y}" />
            <Setter Property="IsSelected" 
                    Value="{Binding IsSelected}" />
        </Style>

        <DataTemplate DataType="{x:Type viewModels:VariableDomainExpressionViewModel}">
            <!-- 
            An adorned control is used to enable the edit button when the user 
            hovers over the expression control.
            -->
            <controls:AdornedControl HorizontalAdornerPlacement="Outside"
                                     VerticalAdornerPlacement="Outside"
                                     AdornerOffsetX="-12"
                                     AdornerOffsetY="8"
                                     IsMouseOverShowEnabled="{Binding ElementName=modelControl, Path=IsNotDragging}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="LeftGraphicRow" Width="20"/>
                        <ColumnDefinition x:Name="VariableExpressionRow" Width="*"/>
                        <ColumnDefinition x:Name="RightGraphicRow" Width="20"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition x:Name="PaddingRow" Height="20"/>
                        <RowDefinition x:Name="ContentRow" Height="*"/>
                    </Grid.RowDefinitions>

                    <Image Grid.Column="0" 
                           Grid.Row="1"
                           Source="../Images/LeftCurlyBracket.png"/>

                    <!-- The domain expression text. -->
                    <controls:EditableTextBlock
                        x:Name="domainExpressionEditor"
                        Text="{Binding Path=Text, Mode=TwoWay}"
                        IsInEditMode="{Binding IsExpressionEditing, Mode=TwoWay}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        TextAlignment="Center"
                        Grid.Column="1"
                        Grid.Row="1"
                        FontFamily="Courier New"
                        FontSize="36"
                        MinWidth="40"
                        MinHeight="50"/>

                    <Image Grid.Column="2" 
                           Grid.Row="1"
                           Source="../Images/RightCurlyBracket.png"/>
                </Grid>
                <controls:AdornedControl.AdornerContent>
                    <!-- 
                    This is the adorner that pops up when the user hovers the mouse over the domain name.
                    It displays a button that the user can click to edit the domain name.
                    -->
                    <Canvas x:Name="variableExpressionAdornerCanvas"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Width="30"
                            Height="30">
                        <Line X1="0"
                              Y1="30"
                              X2="15"
                              Y2="15"
                              Stroke="Black"
                              StrokeThickness="1"/>
                        <Button x:Name="editVariableExpressionButton"
                                Canvas.Left="10"
                                Canvas.Top="0"
                                Width="20"
                                Height="20"
                                Cursor="Hand"
                                Focusable="False"
                                Command="{Binding EditExpressionCommand}"
                                CommandParameter="{Binding}"
                                Template="{StaticResource editButtonTemplate}"/>
                    </Canvas>
                </controls:AdornedControl.AdornerContent>
            </controls:AdornedControl>
        </DataTemplate>

        <!-- 
        Define a data-template for the 'VariableViewModel' class.
        -->
        <DataTemplate DataType="{x:Type viewModels:VariableViewModel}">
            <Grid Height="60">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="VariableNameColumn" Width="Auto"/>
                    <ColumnDefinition x:Name="VariableDomainExpressionColumn" Width="Auto"/>
                </Grid.ColumnDefinitions>

                <!-- 
                An adorned control is used to enable the edit button when the user 
                hovers over the variable name control.
                -->
                <controls:AdornedControl HorizontalAdornerPlacement="Outside"
                                         VerticalAdornerPlacement="Outside"
                                         AdornerOffsetX="-12"
                                         AdornerOffsetY="8"
                                         IsMouseOverShowEnabled="{Binding ElementName=modelControl, Path=IsNotDragging}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="LeftGraphicColumn" Width="30"/>
                            <ColumnDefinition x:Name="NameGraphicColumn" Width="Auto"/>
                            <ColumnDefinition x:Name="RightGraphicColumn" Width="30"/>
                        </Grid.ColumnDefinitions>
                        <!-- Left hand '<' -->
                        <Line X1="0"
                              Y1="30"
                              X2="30"
                              Y2="0"
                              Grid.Column="0"
                              Stroke="Black"
                              StrokeThickness="2"/>
                        <Line X1="0"
                              Y1="30"
                              X2="30"
                              Y2="60"
                              Grid.Column="0"
                              Stroke="Black"
                              StrokeThickness="2"/>

                        <!-- The name of the variable. -->
                        <controls:EditableTextBlock x:Name="nameEditor"
                                                    Grid.Column="1"
                                                    Text="{Binding Name, Mode=TwoWay}"
                                                    IsInEditMode="{Binding IsNameEditing, Mode=TwoWay}"
                                                    FontFamily="Courier New"
                                                    FontWeight="Bold"
                                                    FontSize="24"
                                                    FontStyle="Italic"/>

                        <!-- Right hand '>' -->
                        <Canvas Grid.Column="2">
                            <Line X1="0"
                                  Y1="0"
                                  X2="30"
                                  Y2="30"
                                  Stroke="Black"
                                  StrokeThickness="2"/>
                            <Line X1="30"
                                  Y1="30"
                                  X2="0"
                                  Y2="60"
                                  Stroke="Black"
                                  StrokeThickness="2"/>
                        </Canvas>
                    </Grid>
                    <controls:AdornedControl.AdornerContent>
                        <!-- 
                        This is the adorner that pops up when the user hovers the mouse over the variable name.
                        It displays a button that the user can click to edit the name.
                        -->
                        <Canvas x:Name="variableAdornerCanvas"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Top"
                                Width="30"
                                Height="30">
                            <Line X1="0"
                                  Y1="30"
                                  X2="15"
                                  Y2="15"
                                  Stroke="Black"
                                  StrokeThickness="1"/>
                            <Button x:Name="editVariableNameButton"
                                    Canvas.Left="10"
                                    Canvas.Top="0"
                                    Width="20"
                                    Height="20"
                                    Cursor="Hand"
                                    Focusable="False"
                                    Command="{Binding EditNameCommand}"
                                    CommandParameter="{Binding}"
                                    Template="{StaticResource editButtonTemplate}"/>
                        </Canvas>
                    </controls:AdornedControl.AdornerContent>
                </controls:AdornedControl>

                <ContentPresenter x:Name="expressionEditor"
                                  Grid.Column="1"
                                  Content="{Binding DomainExpression}"/>
            </Grid>
        </DataTemplate>

        <!-- 
        Define a data-template for the AggregateVariableViewModel class.
        -->
        <DataTemplate DataType="{x:Type viewModels:AggregateVariableViewModel}">
            <Grid Height="60">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="VariableNameColumn" Width="Auto"/>
                    <ColumnDefinition x:Name="VariableDomainExpressionColumn" Width="Auto"/>
                </Grid.ColumnDefinitions>

                <!-- 
                An adorned control is used to enable the edit button when the user 
                hovers over the variable name control.
                -->
                <controls:AdornedControl HorizontalAdornerPlacement="Outside"
                                         VerticalAdornerPlacement="Outside"
                                         AdornerOffsetX="-12"
                                         AdornerOffsetY="8"
                                         IsMouseOverShowEnabled="{Binding ElementName=modelControl, Path=IsNotDragging}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="LeftGraphicColumn" Width="30"/>
                            <ColumnDefinition x:Name="NameGraphicColumn" Width="Auto"/>
                            <ColumnDefinition x:Name="RightGraphicColumn" Width="30"/>
                        </Grid.ColumnDefinitions>
                        <!-- Left hand '<' -->
                        <Line X1="0"
                            Y1="30"
                            X2="30"
                            Y2="0"
                            Grid.Column="0"
                            Stroke="Black"
                            StrokeThickness="2"/>
                        <Line X1="0"
                            Y1="30"
                            X2="30"
                            Y2="60"
                            Grid.Column="0"
                            Stroke="Black"
                            StrokeThickness="2"/>

                        <Grid Grid.Column="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="NameColumn" Width="Auto"/>
                                <ColumnDefinition x:Name="RangeColumn" Width="*"/>
                            </Grid.ColumnDefinitions>

                            <!-- The name of the aggregate variable. -->
                            <controls:EditableTextBlock x:Name="nameEditor"
                                                        Text="{Binding Name, Mode=TwoWay}"
                                                        IsInEditMode="{Binding IsNameEditing, Mode=TwoWay}"
                                                        FontFamily="Courier New"
                                                        FontWeight="Bold"
                                                        FontSize="24"
                                                        FontStyle="Italic"/>
                            <!-- Size of the aggregate -->
                            <controls:EditableTextBlock x:Name="variableSizeEditor"
                                       Grid.Column="1"
                                       Text="{Binding NumberVariables}"/>
                        </Grid>

                        <!-- Right hand '>' -->
                        <Canvas Grid.Column="2">
                            <Line X1="0"
                                Y1="0"
                                X2="30"
                                Y2="30"
                                Stroke="Black"
                                StrokeThickness="2"/>
                            <Line X1="30"
                                Y1="30"
                                X2="0"
                                Y2="60"
                                Stroke="Black"
                                StrokeThickness="2"/>
                        </Canvas>
                    </Grid>
                    <controls:AdornedControl.AdornerContent>
                        <!-- 
                        This is the adorner that pops up when the user hovers the mouse over the variable name.
                        It displays a button that the user can click to edit the name.
                        -->
                        <Canvas x:Name="variableAdornerCanvas"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Width="30"
                            Height="30">
                            <Line X1="0"
                                Y1="30"
                                X2="15"
                                Y2="15"
                                Stroke="Black"
                                StrokeThickness="1"/>
                            <Button x:Name="editVariableNameButton"
                                Canvas.Left="10"
                                Canvas.Top="0"
                                Width="20"
                                Height="20"
                                Cursor="Hand"
                                Focusable="False"
                                Command="{Binding EditNameCommand}"
                                CommandParameter="{Binding}"
                                Template="{StaticResource editButtonTemplate}"/>
                        </Canvas>
                    </controls:AdornedControl.AdornerContent>
                </controls:AdornedControl>

                <ContentPresenter x:Name="expressionEditor"
                                Grid.Column="1"
                                Content="{Binding DomainExpression}"/>
            </Grid>
        </DataTemplate>

        <!--
        Define a data-template for the DomainExpressionViewModel class.
        -->
        <DataTemplate DataType="{x:Type viewModels:DomainExpressionViewModel}">
            <!-- 
            An adorned control is used to enable the edit button when the user 
            hovers over the domain name control.
            -->
            <controls:AdornedControl HorizontalAdornerPlacement="Outside"
                                     VerticalAdornerPlacement="Outside"
                                     AdornerOffsetX="-12"
                                     AdornerOffsetY="8"
                                     IsMouseOverShowEnabled="{Binding ElementName=modelControl, Path=IsNotDragging}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="LeftGraphicRow" Width="20"/>
                        <ColumnDefinition x:Name="DomainExpressionRow" Width="*"/>
                        <ColumnDefinition x:Name="RightGraphicRow" Width="20"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition x:Name="PaddingRow" Height="20"/>
                        <RowDefinition x:Name="ContentRow" Height="*"/>
                    </Grid.RowDefinitions>

                    <Image Grid.Column="0" 
                           Grid.Row="1"
                           Source="../Images/LeftCurlyBracket.png"/>

                    <!-- The domain expression text. -->
                    <controls:EditableTextBlock
                        x:Name="domainExpressionEditor"
                        Text="{Binding Path=Text, Mode=TwoWay}"
                        IsInEditMode="{Binding IsExpressionEditing, Mode=TwoWay}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        TextAlignment="Center"
                        Grid.Column="1"
                        Grid.Row="1"
                        FontFamily="Courier New"
                        FontSize="36"
                        MinWidth="40"
                        MinHeight="50"/>

                    <Image Grid.Column="2" 
                           Grid.Row="1"
                           Source="../Images/RightCurlyBracket.png"/>
                </Grid>
                <controls:AdornedControl.AdornerContent>

                    <!-- 
                    This is the adorner that pops up when the user hovers the mouse over the domain name.
                    It displays a button that the user can click to edit the domain name.
                    -->
                    <Canvas x:Name="domainAdornerCanvas"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Top"
                        Width="30"
                        Height="30">
                        <Line X1="0"
                              Y1="30"
                              X2="15"
                              Y2="15"
                              Stroke="Black"
                              StrokeThickness="1"/>
                        <Button x:Name="editDomainNameButton"
                                Canvas.Left="10"
                                Canvas.Top="0"
                                Width="20"
                                Height="20"
                                Cursor="Hand"
                                Focusable="False"
                                Command="{Binding EditExpressionCommand}"
                                CommandParameter="{Binding}"
                                Template="{StaticResource editButtonTemplate}"/>
                    </Canvas>
                </controls:AdornedControl.AdornerContent>
            </controls:AdornedControl>
        </DataTemplate>
            
        <!-- 
        Define a data-template for the DomainViewModel class.
        -->
        <DataTemplate DataType="{x:Type viewModels:DomainViewModel}">
            <Grid Height="60">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="DomainNameColumn" Width="Auto"/>
                    <ColumnDefinition x:Name="DomainExpressionColumn" Width="Auto"/>
                </Grid.ColumnDefinitions>

                <!-- 
                An adorned control is used to enable the edit button when the user 
                hovers over the domain name control.
                -->
                <controls:AdornedControl
                    HorizontalAdornerPlacement="Outside"
                    VerticalAdornerPlacement="Outside"
                    AdornerOffsetX="-12"
                    AdornerOffsetY="8"
                    IsMouseOverShowEnabled="{Binding ElementName=modelControl, Path=IsNotDragging}">

                    <!-- The name of the domain. -->
                    <controls:EditableTextBlock
                        x:Name="nameEditor"
                        Text="{Binding Name, Mode=TwoWay}"
                        IsInEditMode="{Binding IsNameEditing, Mode=TwoWay}"
                        FontFamily="Courier New"
                        FontWeight="Bold"
                        FontSize="24"
                        FontStyle="Italic"/>

                    <controls:AdornedControl.AdornerContent>

                        <!-- 
                        This is the adorner that pops up when the user hovers the mouse over the domain name.
                        It displays a button that the user can click to edit the domain name.
                        -->
                        <Canvas x:Name="domainAdornerCanvas"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Top"
                                Width="30"
                                Height="30">
                            <Line X1="0"
                                  Y1="30"
                                  X2="15"
                                  Y2="15"
                                  Stroke="Black"
                                  StrokeThickness="1"/>
                            <Button x:Name="editDomainNameButton"
                                    Canvas.Left="10"
                                    Canvas.Top="0"
                                    Width="20"
                                    Height="20"
                                    Cursor="Hand"
                                    Focusable="False"
                                    Command="{Binding EditNameCommand}"
                                    CommandParameter="{Binding}"
                                    Template="{StaticResource editButtonTemplate}"/>
                        </Canvas>
                    </controls:AdornedControl.AdornerContent>
                </controls:AdornedControl>

                <ContentPresenter x:Name="expressionEditor"
                                  Grid.Column="1"
                                  Content="{Binding Expression}"/>
            </Grid>
        </DataTemplate>

        <!--
        Define a data-template for the ConstraintExpressionViewModel class.
        -->
        <DataTemplate DataType="{x:Type viewModels:ConstraintExpressionViewModel}">

            <!-- 
            An adorned control is used to enable the edit button when the user 
            hovers over the constraint expression control.
            -->
            <controls:AdornedControl HorizontalAdornerPlacement="Outside"
                                     VerticalAdornerPlacement="Outside"
                                     AdornerOffsetX="-12"
                                     AdornerOffsetY="8"
                                     IsMouseOverShowEnabled="{Binding ElementName=modelControl, Path=IsNotDragging}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="LeftGraphicRow" Width="20"/>
                        <ColumnDefinition x:Name="ConstraintExpressionRow" Width="*"/>
                        <ColumnDefinition x:Name="RightGraphicRow" Width="20"/>
                    </Grid.ColumnDefinitions>

                    <Image Grid.Column="0" 
                           Source="../Images/LeftSquareBracket.png"/>

                    <!-- The constraint expression text. -->
                    <controls:EditableTextBlock
                        x:Name="constraintExpressionEditor"
                        Text="{Binding Path=Text, Mode=TwoWay}"
                        IsInEditMode="{Binding IsExpressionEditing, Mode=TwoWay}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        TextAlignment="Center"
                        Grid.Column="1"
                        FontFamily="Courier New"
                        FontSize="36"
                        MinWidth="40"
                        MinHeight="50"/>

                    <Image Grid.Column="2" 
                           Source="../Images/RightSquareBracket.png"/>
                </Grid>
                <controls:AdornedControl.AdornerContent>

                    <!-- 
                    This is the adorner that pops up when the user hovers the mouse over the constraint expression.
                    It displays a button that the user can click to edit the expression.
                    -->
                    <Canvas x:Name="constraintAdornerCanvas"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Width="30"
                            Height="30">
                        <Line X1="0"
                                Y1="30"
                                X2="15"
                                Y2="15"
                                Stroke="Black"
                                StrokeThickness="1"/>
                        <Button x:Name="editConstraintExpressionButton"
                                Canvas.Left="10"
                                Canvas.Top="0"
                                Width="20"
                                Height="20"
                                Cursor="Hand"
                                Focusable="False"
                                Command="{Binding EditExpressionCommand}"
                                CommandParameter="{Binding}"
                                Template="{StaticResource editButtonTemplate}"/>
                    </Canvas>
                </controls:AdornedControl.AdornerContent>
            </controls:AdornedControl>
        </DataTemplate>

        <!-- 
        Define a data-template for the ConstraintViewModel class.
        This generates the UI for each constraint.
        -->
        <DataTemplate DataType="{x:Type viewModels:ConstraintViewModel}">
            <Grid Height="60">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="ConstraintNameColumn" Width="Auto"/>
                    <ColumnDefinition x:Name="ConstraintExpressionColumn" Width="Auto"/>
                </Grid.ColumnDefinitions>

                <!-- 
                An adorned control is used to enable the edit button when the user 
                hovers over the constraint name control.
                -->
                <controls:AdornedControl
                    HorizontalAdornerPlacement="Outside"
                    VerticalAdornerPlacement="Outside"
                    AdornerOffsetX="-12"
                    AdornerOffsetY="8"
                    IsMouseOverShowEnabled="{Binding ElementName=modelControl, Path=IsNotDragging}">

                    <!-- The name of the domain. -->
                    <controls:EditableTextBlock
                        x:Name="nameEditor"
                        Text="{Binding Name, Mode=TwoWay}"
                        IsInEditMode="{Binding IsNameEditing, Mode=TwoWay}"
                        FontFamily="Courier New"
                        FontWeight="Bold"
                        FontSize="24"
                        FontStyle="Italic"/>

                    <controls:AdornedControl.AdornerContent>

                        <!-- 
                        This is the adorner that pops up when the user hovers the mouse over the constraint name.
                        It displays a button that the user can click to edit the name.
                        -->
                        <Canvas x:Name="constraintAdornerCanvas"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Top"
                                Width="30"
                                Height="30">
                            <Line X1="0"
                                    Y1="30"
                                    X2="15"
                                    Y2="15"
                                    Stroke="Black"
                                    StrokeThickness="1"/>
                            <Button x:Name="editConstraintButton"
                                    Canvas.Left="10"
                                    Canvas.Top="0"
                                    Width="20"
                                    Height="20"
                                    Cursor="Hand"
                                    Focusable="False"
                                    Command="{Binding EditNameCommand}"
                                    CommandParameter="{Binding}"
                                    Template="{StaticResource editButtonTemplate}"/>
                            </Canvas>
                        </controls:AdornedControl.AdornerContent>
                    </controls:AdornedControl>

                    <ContentPresenter x:Name="expressionEditor"
                                        Grid.Column="1"
                                        Content="{Binding Expression}"/>
                </Grid>
            </DataTemplate>

        </ResourceDictionary>
    </Window.Resources>
    
    <Window.InputBindings>

        <!-- Bind input to commands. -->
        <KeyBinding
			Key="Delete"
			Command="{StaticResource Commands.DeleteSelectedGraphics}" />

    </Window.InputBindings>

    <Window.CommandBindings>

        <!-- Bind commands to event handlers. -->
        <CommandBinding 
            Command="{StaticResource Commands.DeleteSelectedGraphics}" 
            Executed="DeleteSelectedGraphics_Executed" />
        <CommandBinding 
            Command="{StaticResource Commands.DeleteVariable}" 
            Executed="DeleteVariable_Executed" />
        <CommandBinding 
            Command="{StaticResource Commands.DeleteDomain}" 
            Executed="DeleteDomain_Executed" />
        <CommandBinding 
            Command="{StaticResource Commands.DeleteConstraint}" 
            Executed="DeleteConstraint_Executed" />

    </Window.CommandBindings>

    <Window.ContextMenu>

        <ContextMenu>

            <MenuItem
                Header="Create Singleton Variable"
                Command="{Binding AddSingletonVariableCommand}"
                ToolTip="Create a new variable" />

            <MenuItem
                Header="Create Aggregate Variable"
                Command="{Binding AddAggregateVariableCommand}"
                ToolTip="Create a new variable" />

        </ContextMenu>

    </Window.ContextMenu>

    <DockPanel LastChildFill="True">

        <Menu DockPanel.Dock="Top">
            <MenuItem Header="File">
                <MenuItem Header="New" Command="{Binding NewCommand}">
                    <MenuItem.Icon>
                        <Image Source="../Images/Transparent.png"  />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Open" Command="{Binding OpenCommand}">
                    <MenuItem.Icon>
                        <Image Source="../Images/Transparent.png"  />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Save" Command="{Binding SaveCommand}">
                    <MenuItem.Icon>
                        <Image Source="../Images/Transparent.png"  />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Save As..." Command="{Binding SaveAsCommand}">
                    <MenuItem.Icon>
                        <Image Source="../Images/Transparent.png"  />
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Exit" Command="{Binding ExitCommand}">
                    <MenuItem.Icon>
                        <Image Source="../Images/Transparent.png" />
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="Edit">
            </MenuItem>
            <MenuItem Header="Model">
                <MenuItem Header="Solve..." Command="{Binding SolveCommand}">
                    <MenuItem.Icon>
                        <Image Source="../Images/Transparent.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Add Singleton Variable" Command="{Binding AddSingletonVariableCommand}">
                    <MenuItem.Icon>
                        <Image Source="../Images/Transparent.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Add Aggregate Variable" Command="{Binding AddAggregateVariableCommand}">
                    <MenuItem.Icon>
                        <Image Source="../Images/Transparent.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Add Constraint" Command="{Binding AddConstraintCommand}">
                    <MenuItem.Icon>
                        <Image Source="../Images/Transparent.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Add Domain" Command="{Binding AddDomainCommand}">
                    <MenuItem.Icon>
                        <Image Source="../Images/Transparent.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Delete" Command="{Binding DeleteCommand}">
                    <MenuItem.Icon>
                        <Image Source="../Images/Transparent.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Resize Aggregate" Command="{Binding ResizeCommand}">
                    <MenuItem.Icon>
                        <Image Source="../Images/Transparent.png" />
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
        </Menu>

        <ContentPresenter x:Name="workspaceView" Content="{Binding Workspace}"/>
    </DockPanel>
</Window>
